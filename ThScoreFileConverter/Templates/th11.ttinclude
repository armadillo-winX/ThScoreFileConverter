<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetPath)" #>
<#@ include file="footer.ttinclude" once="true" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="ThScoreFileConverter.Extensions" #>
<#@ import namespace="ThScoreFileConverter.Helpers" #>
<#@ import namespace="ThScoreFileConverter.Models" #>
<#@ import namespace="ThScoreFileConverter.Models.Th11" #>
<#
    var levels = EnumHelper.GetEnumerable<Level>()
        .ToDictionary(level => level.ToShortName(), level => level.ToString());
    var levelsWithTotal = EnumHelper.GetEnumerable<LevelWithTotal>()
        .ToDictionary(level => level.ToShortName(), level => level.ToString());

    var levelKeyTotal = LevelWithTotal.Total.ToShortName();
    var levelKeyOrderTotalFirst = levelsWithTotal.Keys.TakeLast(1).Concat(levelsWithTotal.Keys.SkipLast(1));
    var levelKeyOrderTotalLast = levelsWithTotal.Keys;

    var levelsPractice = levels.Where(pair => pair.Key != Level.Extra.ToShortName());

    var characters = new List<(Chara chara, string name)>
    {
        (Chara.ReimuYukari,     "霊夢 &amp; 紫"),
        (Chara.ReimuSuika,      "霊夢 &amp; 萃香"),
        (Chara.ReimuAya,        "霊夢 &amp; 文"),
        (Chara.MarisaAlice,     "魔理沙 &amp; アリス"),
        (Chara.MarisaPatchouli, "魔理沙 &amp; パチュリー"),
        (Chara.MarisaNitori,    "魔理沙 &amp; にとり"),
    }.ToDictionary(pair => pair.chara.ToShortName(), pair => pair.name);

    var charactersWithTotal = new List<(CharaWithTotal chara, string name)>
    {
        (CharaWithTotal.ReimuYukari,     "霊夢 &amp; 紫"),
        (CharaWithTotal.ReimuSuika,      "霊夢 &amp; 萃香"),
        (CharaWithTotal.ReimuAya,        "霊夢 &amp; 文"),
        (CharaWithTotal.MarisaAlice,     "魔理沙 &amp; アリス"),
        (CharaWithTotal.MarisaPatchouli, "魔理沙 &amp; パチュリー"),
        (CharaWithTotal.MarisaNitori,    "魔理沙 &amp; にとり"),
        (CharaWithTotal.Total,           "全主人公合計"),
    }.ToDictionary(pair => pair.chara.ToShortName(), pair => pair.name);

    var charaKeyTotal = CharaWithTotal.Total.ToShortName();
    var charaKeyOrderTotalFirst = charactersWithTotal.Keys.TakeLast(1).Concat(charactersWithTotal.Keys.SkipLast(1));
    var charaKeyOrderTotalLast = charactersWithTotal.Keys;

    var stages = new List<(Stage stage, string name)>
    {
        (Stage.One,   "Stage 1"),
        (Stage.Two,   "Stage 2"),
        (Stage.Three, "Stage 3"),
        (Stage.Four,  "Stage 4"),
        (Stage.Five,  "Stage 5"),
        (Stage.Six,   "Stage 6"),
        (Stage.Extra, "Extra"),
    }.ToDictionary(pair => pair.stage.ToShortName(), pair => pair.name);

    var stagesWithTotal = new List<(StageWithTotal stage, string name)>
    {
        (StageWithTotal.One,   "Stage 1"),
        (StageWithTotal.Two,   "Stage 2"),
        (StageWithTotal.Three, "Stage 3"),
        (StageWithTotal.Four,  "Stage 4"),
        (StageWithTotal.Five,  "Stage 5"),
        (StageWithTotal.Six,   "Stage 6"),
        (StageWithTotal.Extra, "Extra"),
        (StageWithTotal.Total, "Total"),
    }.ToDictionary(pair => pair.stage.ToShortName(), pair => pair.name);

    var stageKeyTotal = StageWithTotal.Total.ToShortName();
    var stageKeyOrderTotalFirst = stagesWithTotal.Keys.TakeLast(1).Concat(stagesWithTotal.Keys.SkipLast(1));
    var stageKeyOrderTotalLast = stagesWithTotal.Keys;

    var stagesPractice = stages.Where(pair => pair.Key != Stage.Extra.ToShortName());

    var cardsPerLevel = new List<(Level level, int numCards)>
    {
        (Level.Easy,    40),
        (Level.Normal,  40),
        (Level.Hard,    41),
        (Level.Lunatic, 41),
        (Level.Extra,   13),
    }.ToDictionary(pair => pair.level.ToShortName(), pair => pair.numCards);

    var cardsPerStage = new List<(Stage stage, int numCards)>
    {
        (Stage.One,   10),
        (Stage.Two,   16),
        (Stage.Three, 16),
        (Stage.Four,  76),
        (Stage.Five,  20),
        (Stage.Six,   24),
        (Stage.Extra, 13),
    }.ToDictionary(pair => pair.stage.ToShortName(), pair => pair.numCards);

    var numCards = cardsPerLevel.Values.Sum();
#>