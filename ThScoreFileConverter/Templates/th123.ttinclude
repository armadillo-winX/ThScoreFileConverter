<#@ assembly name="System.Core" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#
    var levelKeyTotal = "T";

    var levels = new Dictionary<string, string>
    {
        { "E", "Easy" },
        { "N", "Normal" },
        { "H", "Hard" },
        { "L", "Lunatic" },
    };

    var levelsWithTotal = levels.Concat(new Dictionary<string, string>
    {
        { levelKeyTotal, "Total" },
    }).ToDictionary(pair => pair.Key, pair => pair.Value);

    var levelKeyOrderTotalFirst = new[] { levelKeyTotal }.Concat(levels.Keys);
    var levelKeyOrderTotalLast = levelsWithTotal.Keys;

    var characters = new Dictionary<string, (string Id, string ShortName, string LongName)>
    {
        { "RM", ("Reimu", "霊夢", "博麗 霊夢") },
        { "MR", ("Marisa", "魔理沙", "霧雨 魔理沙") },
        { "SK", ("Sakuya", "咲夜", "十六夜 咲夜") },
        { "AL", ("Alice", "アリス", "アリス・マーガトロイド") },
        { "PC", ("Patchouli", "パチュリー", "パチュリー・ノーレッジ") },
        { "YM", ("Youmu", "妖夢", "魂魄 妖夢") },
        { "RL", ("Remilia", "レミリア", "レミリア・スカーレット") },
        { "YU", ("Yuyuko", "幽々子", "西行寺 幽々子") },
        { "YK", ("Yukari", "紫", "八雲 紫") },
        { "SU", ("Suika", "萃香", "伊吹 萃香") },
        { "RS", ("Reisen", "鈴仙", "鈴仙・優曇華院・イナバ") },
        { "AY", ("Aya", "文", "射命丸 文") },
        { "KM", ("Komachi", "小町", "小野塚 小町") },
        { "IK", ("Iku", "衣玖", "永江 衣玖") },
        { "TN", ("Tenshi", "天子", "比那名居 天子") },
        { "SN", ("Sanae", "早苗", "東風谷 早苗") },
        { "CI", ("Cirno", "チルノ", "チルノ") },
        { "ML", ("Meiling", "美鈴", "紅 美鈴") },
        { "UT", ("Utsuho", "空", "霊烏路 空") },
        { "SW", ("Suwako", "諏訪子", "洩矢 諏訪子") },
    };

    var storyCharacters = characters.Where(
        pair => (pair.Key == "SN") || (pair.Key == "CI") || (pair.Key == "ML"));

    var cardsPerLevel = new Dictionary<string, int>
    {
        { "E", 23 },
        { "N", 24 },
        { "H", 25 },
        { "L", 25 },
    };

    var cardsPerChara = new Dictionary<string, int>
    {
        { "SN", 64 },
        { "CI", 64 },
        { "ML", 64 },
    };

    var cardTypes = new Dictionary<string, string>
    {
        { "Y", "System" },
        { "K", "Skill" },
        { "P", "Spell" },
    };

    var cardsPerCharaAndType = new Dictionary<(string Chara, string CardType), int>
    {
        { ("RM", "Y"), 21 },
        { ("RM", "K"), 12 },
        { ("RM", "P"), 10 },
        { ("MR", "Y"), 21 },
        { ("MR", "K"), 12 },
        { ("MR", "P"), 14 },
        { ("SK", "Y"), 21 },
        { ("SK", "K"), 12 },
        { ("SK", "P"), 13 },
        { ("AL", "Y"), 21 },
        { ("AL", "K"), 12 },
        { ("AL", "P"), 12 },
        { ("PC", "Y"), 21 },
        { ("PC", "K"), 15 },
        { ("PC", "P"), 12 },
        { ("YM", "Y"), 21 },
        { ("YM", "K"), 12 },
        { ("YM", "P"), 10 },
        { ("RL", "Y"), 21 },
        { ("RL", "K"), 12 },
        { ("RL", "P"), 10 },
        { ("YU", "Y"), 21 },
        { ("YU", "K"), 12 },
        { ("YU", "P"), 11 },
        { ("YK", "Y"), 21 },
        { ("YK", "K"), 12 },
        { ("YK", "P"), 10 },
        { ("SU", "Y"), 21 },
        { ("SU", "K"), 12 },
        { ("SU", "P"), 10 },
        { ("RS", "Y"), 21 },
        { ("RS", "K"), 12 },
        { ("RS", "P"), 11 },
        { ("AY", "Y"), 21 },
        { ("AY", "K"), 12 },
        { ("AY", "P"), 10 },
        { ("KM", "Y"), 21 },
        { ("KM", "K"), 12 },
        { ("KM", "P"), 9 },
        { ("IK", "Y"), 21 },
        { ("IK", "K"), 12 },
        { ("IK", "P"), 10 },
        { ("TN", "Y"), 21 },
        { ("TN", "K"), 12 },
        { ("TN", "P"), 10 },
        { ("SN", "Y"), 21 },
        { ("SN", "K"), 12 },
        { ("SN", "P"), 9 },
        { ("CI", "Y"), 21 },
        { ("CI", "K"), 12 },
        { ("CI", "P"), 11 },
        { ("ML", "Y"), 21 },
        { ("ML", "K"), 12 },
        { ("ML", "P"), 11 },
        { ("UT", "Y"), 21 },
        { ("UT", "K"), 12 },
        { ("UT", "P"), 14 },
        { ("SW", "Y"), 21 },
        { ("SW", "K"), 12 },
        { ("SW", "P"), 11 },
    };

    var maxNumCardsPerType = cardTypes.ToDictionary(
        pair => pair.Key,
        pair => cardsPerCharaAndType.Where(p => p.Key.CardType == pair.Key).Max(p => p.Value));
#>